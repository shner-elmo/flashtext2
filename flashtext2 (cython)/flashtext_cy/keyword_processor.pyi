from typing import Literal, overload, Mapping, Iterable, Generator
from collections.abc import Mapping as ABC_Mapping, Iterable as ABC_Iterable

NON_WORD_BOUNDARIES: set[str]
KEYWORD: str


def convert_trie_to_dict(dct: dict[str, dict | str], s: str = '', mapping: dict | None = None) -> dict[str, str]:
    ...

class KeywordProcessor:
    keyword: str
    _case_sensitive: bool
    trie: dict[str, dict | str]
    non_word_boundaries: set[str]

    def __init__(self, case_sensitive: bool = False, non_word_boundaries: set[str] | None = None) -> None:
        ...
    def get_keywords(self) -> dict[str, str]:
        ...
    def add_keyword(self, word: str, clean_word: str | None = None) -> None:
        ...
    def add_keywords(self, words: Iterable[str] | Mapping[str, str] | Mapping[str, Iterable[str]]) -> None:
        ...
    @overload
    def extract_keywords(self, sentence: str, span_info: bool = False) -> list[str]:
        ...
    @overload
    def extract_keywords(self, sentence: str, span_info: Literal[True]) -> list[tuple[str, int, int]]:
        ...
    def extract_keywords(self, sentence: str, span_info: bool = False) -> list[str] | list[tuple[str, int, int]]:
        ...
    def _extract_keywords_impl(self, sentence: str) -> Generator[tuple[str, int, int]]:
        ...
    def _split_sentence(self, sentence: str) -> Generator[str, None, None]:
        ...
    def replace_keywords(self, sentence: str) -> str:
        ...
    def __eq__(self, other) -> bool:
        ...
    def __repr__(self) -> str:
        ...
